{"version":3,"file":"static/js/311.9cfa65e0.chunk.js","mappings":"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","sources":["components/common/Profile.tsx","recoil/sign-up/atom.ts","components/sign-up/ProfileImgUpload.tsx","components/sign-up/EmailSignUpContainer.tsx","pages/SignUp.tsx","utils/axiosApi/formApi.ts","utils/compressImg.ts","utils/handleHEIC.ts"],"sourcesContent":["import tw from \"tailwind-styled-components\";\n\nexport const ProfileImg = tw.img`\nw-[10vh] h-[10vh] object-cover shadow-lg mx-auto my-2 rounded-full bg-white\n`;\n\nexport const ProfileImgDescription = tw.label`\ncursor-pointer text-purple-1000 text-[1.4vh]\ndrop-shadow-lg hover:drop-shadow-none transition duration-300 ease-in-out\n`;\n","import { atom } from \"recoil\";\n\nexport type Img = string | Blob;\n\nexport const profileImgAtom = atom<Img>({\n  key: \"profileImgAtom\",\n  default: \"\",\n});\n","import React, { useState, useEffect, useRef } from \"react\";\nimport { useRecoilState, useResetRecoilState } from \"recoil\";\n\nimport { profileImgAtom } from \"src/recoil/sign-up\";\nimport { compressImg } from \"src/utils/compressImg\";\nimport { isHEICFile, convertHEICToJPG } from \"src/utils/handleHEIC\";\nimport DefaultProfileImg from \"../../assets/icons/default_profile.png\";\nimport { ProfileImg, ProfileImgDescription } from \"../common/Profile\";\n\nexport const ProfileImgUpload = () => {\n  const [profileImg, setProfileImg] = useRecoilState(profileImgAtom);\n  const resetProfileImg = useResetRecoilState(profileImgAtom);\n  const [imgPreview, setImgPreview] = useState<string | ArrayBuffer | null>(\"\");\n  const imgRef = useRef<HTMLInputElement>(null);\n  const reader = new FileReader();\n\n  const saveImgFile = async () => {\n    if (imgRef?.current?.files) {\n      let file = imgRef.current.files[0];\n      if (isHEICFile(file)) file = await convertHEICToJPG(file);\n      const compressedImg = await compressImg(file);\n      if (compressedImg) file = compressedImg;\n      setProfileImg(file);\n      reader.readAsDataURL(file);\n      reader.onloadend = () => {\n        setImgPreview(reader.result);\n      };\n    }\n  };\n\n  const deleteImgFile = () => {\n    if (typeof profileImg === \"string\") URL.revokeObjectURL(profileImg);\n    setProfileImg(\"\");\n  };\n\n  useEffect(() => {\n    return () => {\n      resetProfileImg();\n    };\n  }, []);\n\n  return (\n    <div className=\"m-auto text-center\">\n      <ProfileImg alt=\"profile\" src={profileImg ? imgPreview : DefaultProfileImg} />\n      {!profileImg && (\n        <ProfileImgDescription htmlFor=\"profileImg\">ÌîÑÎ°úÌïÑ Ïù¥ÎØ∏ÏßÄ Ï∂îÍ∞Ä</ProfileImgDescription>\n      )}\n      {profileImg && (\n        <ProfileImgDescription onClick={deleteImgFile}>\n          ÌîÑÎ°úÌïÑ Ïù¥ÎØ∏ÏßÄ ÏÇ≠Ï†ú\n        </ProfileImgDescription>\n      )}\n      <input\n        className=\"hidden\"\n        type=\"file\"\n        accept=\"image/bmp,image/jpeg, image/jpg, image/png, image/heic\"\n        onChange={saveImgFile}\n        ref={imgRef}\n      />\n    </div>\n  );\n};\n","import React from \"react\";\nimport tw from \"tailwind-styled-components\";\nimport { useForm } from \"react-hook-form\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useRecoilValue } from \"recoil\";\n\nimport { profileImgAtom } from \"src/recoil/sign-up\";\nimport { Img } from \"src/recoil/sign-up/atom\";\nimport { PUBLIC_ROUTE } from \"src/router/ROUTE_INFO\";\nimport { API_URL } from \"src/constants/API_URL\";\nimport { ProfileImgUpload } from \"./ProfileImgUpload\";\nimport { Input, InputContainer } from \"../common/Input\";\nimport PurpleButton from \"../common/PurpleButton\";\nimport { formApi } from \"src/utils/axiosApi/formApi\";\n\ninterface SignUpInput {\n  readonly nickname: string;\n  readonly email: string;\n  readonly password: string;\n  readonly pwConfirm?: string | undefined;\n}\n\nconst createSignUpForm = (profileImg: Img, { nickname, email, password }: SignUpInput) => {\n  const formData = new FormData();\n  if (profileImg) formData.append(\"profile\", profileImg);\n  formData.append(\"nickname\", nickname);\n  formData.append(\"email\", email);\n  formData.append(\"password\", password);\n\n  return formData;\n};\n\nconst EmailSignUpContainer = () => {\n  const navigate = useNavigate();\n  const profileImg = useRecoilValue(profileImgAtom);\n  const {\n    register,\n    handleSubmit,\n    getValues,\n    formState: { errors },\n  } = useForm<SignUpInput>({ mode: \"onChange\" });\n\n  const pwConfirmRegister = register(\"pwConfirm\", {\n    validate: (pwconfirm: string | undefined) => {\n      const { password } = getValues();\n      return password === pwconfirm || \"ÎπÑÎ∞ÄÎ≤àÌò∏Í∞Ä ÏùºÏπòÌïòÏßÄ ÏïäÏäµÎãàÎã§.\";\n    },\n  });\n\n  const onSubmitSignUp = async ({ nickname, email, password }: SignUpInput) => {\n    const formData = createSignUpForm(profileImg, { nickname, email, password });\n    try {\n      await formApi.post(API_URL.users, formData);\n      confirm(\"Welcome to PODOLOG! üçá\");\n      navigate(PUBLIC_ROUTE.home.path);\n    } catch (err) {\n      if (err instanceof Error) alert(err.message);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmitSignUp)} encType=\"multipart/form-data\">\n      <ProfileImgUpload />\n      <InputContainer>\n        <Input placeholder=\"nickname\" minLength={2} required {...register(\"nickname\")} />\n      </InputContainer>\n      <InputContainer>\n        <Input placeholder=\"email\" type=\"email\" required {...register(\"email\")} />\n      </InputContainer>\n      <InputContainer>\n        <Input\n          placeholder=\"password\"\n          type=\"password\"\n          minLength={4}\n          required\n          {...register(\"password\")}\n        />\n      </InputContainer>\n      <div className=\"w-[65%] mx-auto\">\n        <InputContainer className=\"w-full\">\n          <Input\n            placeholder=\"confirm password\"\n            type=\"password\"\n            minLength={4}\n            required\n            {...pwConfirmRegister}\n          />\n        </InputContainer>\n        {errors.pwConfirm && <PwConfirmMsg>{errors.pwConfirm.message}</PwConfirmMsg>}\n      </div>\n      <PurpleButton\n        description=\"Sign Up\"\n        wrapperStyle=\"mt-[3vh] w-full\"\n        buttonStyle=\"w-[65%]\"\n      />\n    </form>\n  );\n};\n\nexport default EmailSignUpContainer;\n\nconst PwConfirmMsg = tw.p`\nfont-sans text-red-600 text-xs sm:text-base mt-1 ml-[5px]\n`;\n","import React from \"react\";\nimport Fade from \"react-reveal/Fade\";\n\nimport { DefaultBackground } from \"src/components/common/Backgrounds\";\nimport \"src/components/common/Backgrounds.css\";\nimport { Greeting } from \"src/components/home/Greeting\";\nimport { InputSectionContainer } from \"src/components/common/Input\";\nimport EmailSignUpContainer from \"src/components/sign-up/EmailSignUpContainer\";\nimport SNSLoginContainer from \"../components/home/SNSLoginContainer\";\n\nconst SignUp = () => {\n  return (\n    <DefaultBackground className=\"animated-gradient\">\n      <Greeting />\n      <Fade duration={3000}>\n        <InputSectionContainer>\n          <EmailSignUpContainer />\n          <SNSLoginContainer sectionTitle=\"SNS Í≥ÑÏ†ï ÌöåÏõêÍ∞ÄÏûÖ\" />\n        </InputSectionContainer>\n      </Fade>\n    </DefaultBackground>\n  );\n};\n\nexport default SignUp;\n","import axios from \"axios\";\nimport { getAccessToken } from \"src/utils/token\";\nimport { defaultApi } from \"./defaultApi\";\n\nexport const formApi = axios.create({ ...defaultApi.defaults });\n\nformApi.interceptors.response = defaultApi.interceptors.response;\n\nformApi.interceptors.request.use(\n  (config) => {\n    config.headers[\"Content-Type\"] = \"multipart/form-data\";\n    config.headers[\"Authorization\"] = `Bearer ${getAccessToken()}`;\n    config.withCredentials = true;\n    return config;\n  },\n  (error) => {\n    Promise.reject(error);\n  }\n);\n","import imageCompression from \"browser-image-compression\";\n\nexport const compressImg = async (image: File) => {\n  const options = {\n    maxSizeMb: 1,\n    maxWidthOrHeight: 1200,\n  };\n  try {\n    const blob = await imageCompression(image, options);\n    return new File([blob], blob.name);\n  } catch (err) {\n    if (err instanceof Error) alert(err.message);\n  }\n};\n","export const isHEICFile = (file: File): boolean => {\n  return file.type === \"image/heic\" || file.type === \"image/HEIC\";\n};\n\nexport const convertHEICToJPG = async (file: File) => {\n  const heic2any = await import(\"heic2any\");\n  const jpgBlob = await heic2any.default({ blob: file, toType: \"image/jpeg\" });\n\n  return new File([jpgBlob as BlobPart], file.name.split(\".\")[0] + \".jpg\", {\n    type: \"image/jpeg\",\n  });\n};\n"],"names":["ProfileImg","tw","ProfileImgDescription","profileImgAtom","atom","key","default","ProfileImgUpload","useRecoilState","profileImg","setProfileImg","resetProfileImg","useResetRecoilState","useState","imgPreview","setImgPreview","imgRef","useRef","reader","FileReader","saveImgFile","current","files","file","isHEICFile","convertHEICToJPG","compressImg","compressedImg","readAsDataURL","onloadend","result","useEffect","className","Profile","alt","src","DefaultProfileImg","htmlFor","onClick","URL","revokeObjectURL","type","accept","onChange","ref","createSignUpForm","nickname","email","password","formData","FormData","append","navigate","useNavigate","useRecoilValue","useForm","mode","register","handleSubmit","getValues","errors","formState","pwConfirmRegister","validate","pwconfirm","onSubmitSignUp","formApi","API_URL","confirm","PUBLIC_ROUTE","Error","alert","message","onSubmit","encType","Input","placeholder","minLength","required","pwConfirm","PwConfirmMsg","PurpleButton","description","wrapperStyle","buttonStyle","Greeting","duration","SNSLoginContainer","sectionTitle","axios","defaultApi","interceptors","response","request","use","config","headers","getAccessToken","withCredentials","error","Promise","reject","image","options","maxSizeMb","maxWidthOrHeight","imageCompression","blob","File","name","heic2any","toType","jpgBlob","split"],"sourceRoot":""}